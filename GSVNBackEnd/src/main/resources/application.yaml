
#Server port
server:
  port: ${SERVER_PORT}
spring:
  rabbitmq:
    addresses: ${SPRING_RABBITMQ_ADDRESSES}
    adminAddresses: ${SPRING_RABBITMQ_ADMINADDRESSES}
    username: ${SPRING_RABBITMQ_USERNAME}
    password: ${SPRING_RABBITMQ_PASSWORD}
    virtual_host: ${SPRING_RABBITMQ_VIRTUAL_HOST}
    useSSL: ${SPRING_RABBITMQ_USESSL}
    sslProperties:
      ssl:
        keyStore: ${SPRING_RABBITMQ_SSLPROPERTIES_SSL_KEYSTORE}
        keyStorePassphrase: ${SPRING_RABBITMQ_SSLPROPERTIES_SSL_KEYSTOREPASSPHRASE}
        trustStore: ${SPRING_RABBITMQ_SSLPROPERTIES_SSL_TRUSTSTORE}
        trustStorePassphrase: ${SPRING_RABBITMQ_SSLPROPERTIES_SSL_TRUSTSTOREPASSPHRASE}
    channelCacheSize: ${SPRING_RABBITMQ_CHANNELCACHESIZE}
  data:
    elasticsearch:
      username: ${SPRING_DATA_ELASTICSEARCH_USERNAME}
      password: ${SPRING_DATA_ELASTICSEARCH_PASSWORD}
      repositories:
        enabled: ${SPRING_DATA_ELASTICSEARCH_REPOSITORIES_ENABLED}
    mongodb:
      authentication-database: ${SPRING_DATA_MONGODB_AUTHENTICATIONDATABASE}
      username: ${SPRING_DATA_MONGODB_USERNAME}
      password: ${SPRING_DATA_MONGODB_PASSWORD}
      database: ${SPRING_DATA_MONGODB_DATABASE}
      port: ${SPRING_DATA_MONGODB_PORT}
      host: ${SPRING_DATA_MONGODB_HOST}
    redis:
      host: ${SPRING_DATA_REDIS_HOST}
      port: ${SPRING_DATA_REDIS_PORT}
      password: ${SPRING_DATA_REDIS_PASSWORD}
  application:
    name: ${SPRING_APPLICATION_NAME}
  # DataSource configuration
  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: ${DATASOURCE_DRIVER_CLASS_NAME}
  #  hikari:
  #    connection-timeout: ${DATASOURCE_HIKARI_CONNECTION_TIMEOUT}
  #    idle-timeout: ${DATASOURCE_HIKARI_IDLE_TIMEOUT}
  #    max-lifetime: ${DATASOURCE_HIKARI_MAX_LIFETIME}
  #    minimum-idle: ${DATASOURCE_HIKARI_MINIMUM_IDLE}
  #    connection-test-query: "${DATASOURCE_HIKARI_CONNECTION_TEST_QUERY}"

  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO}
    properties:
      hibernate:
        dialect: ${SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT}
        format_sql: ${SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL}
    show-sql: ${SPRING_JPA_SHOW_SQL}

saga:
  direct-exchange-name: gmvn


minio:
  endpoint: ${MINIO_ENDPOINT}
  access-key: ${MINIO_ACCESS_KEY}
  secret-key: ${MINIO_SECRET_KEY}
  sku-image-bucket-name: ${MINIO_SKU_IMAGE_BUCKET_NAME}
  spu-image-bucket-name: ${MINIO_SPU_IMAGE_BUCKET_NAME}
  spu-gallery-bucket-name: ${MINIO_SPU_GALLERY_BUCKET_NAME}
  spu-video-bucket-name: ${MINIO_SPU_VIDEO_BUCKET_NAME}

origins: ${ORIGINS}
issuer: ${ISSUER}
client-id: ${CLIENT_ID}
com:
  c4-soft:
    springaddons:
      oidc:
        cors:
          - path: /api/**
            allowed-origin-patterns: ${origins}
        ops:
          - iss: ${issuer}
            username-claim: sub
            authorities:
              - path: $.realm_access.roles
                prefix: ROLE_
              - path: $.resource_access.gsvn-backend.roles
                prefix: SCOPE_
        resourceserver:
          permit-all:
            - "/api/*"

payment:
  vnPay:
    url: ${VNPAY_URL}
    tmnCode: ${VNPAY_TMNCODE}
    secretKey: ${VNPAY_SECRETKEY}
    returnUrl: ${VNPAY_RETURNURL}
    version: ${VNPAY_VERSION}
    command: ${VNPAY_COMMAND}
    orderType: ${VNPAY_ORDERTYPE}